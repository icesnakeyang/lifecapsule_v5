<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cc.cdtime.lifecapsule.meta.user.dao.UserBaseDao">
    <!--配置表和对象的字段映射 -->
    <resultMap id="userMap" type="cc.cdtime.lifecapsule.meta.user.entity.UserView">
        <result property="userId" column="user_id"/>
        <result property="createTime" column="create_time"/>
        <result property="loginName" column="login_name"/>
        <result property="timerPrimary" column="timer_time"/>
        <result property="loginTime" column="login_time"/>
        <result property="userCode" column="user_code"/>
    </resultMap>

    <!--创建一个基本用户账户-->
    <insert id="createUserBase"
            useGeneratedKeys="true"
            parameterType="cc.cdtime.lifecapsule.meta.user.entity.UserBase">
        insert into user_base
        (user_id, create_time,
         nickname, language, user_code)
        values (#{userId}, #{createTime},
                #{nickname}, #{language}, #{userCode})
    </insert>

    <!--查询用户基础信息-->
    <select id="getUserBase" parameterType="map" resultMap="userMap">
        select *
        from user_base
        where 1=1
        <choose>
            <when test="userId!=null">
                and user_id = #{userId}
            </when>
        </choose>
        <choose>
            <when test="userCode!=null">
                and user_code=#{userCode}
            </when>
        </choose>
    </select>

    <!--查询用户列表-->
    <select id="listUser" parameterType="map" resultMap="userMap">
        select *
        from user_base ub
        left join user_login_name uln on ub.user_id = uln.user_id
        left join user_phone up on ub.user_id = up.user_id
        left join user_email ue on ub.user_id = ue.user_id
        left join (select *
        from (
        select user_id,
        row_number() over (partition by user_id order by login_time desc),
        ids,
        login_time
        from user_login_log
        ) as de_dump
        where row_number = 1) aa on ub.user_id = aa.user_id
        where 1 = 1
        <choose>
            <when test="userId!=null">
                and ub.user_id = #{userId}
            </when>
        </choose>
        <choose>
            <when test="loginName!=null">
                and login_name = #{loginName}
            </when>
        </choose>
        <choose>
            <when test="phone!=null">
                and phone = #{phone}
            </when>
        </choose>
        <choose>
            <when test="email!=null">
                and email = #{email}
            </when>
        </choose>
        order by ub.create_time desc
        <choose>
            <when test="offset!=null">
                limit #{size}
                offset #{offset}
            </when>
        </choose>
    </select>
    <select id="totalUser" parameterType="map" resultType="java.lang.Integer">
        select count(*) as total
        from user_base ub
        left join user_login_name uln on ub.user_id = uln.user_id
        left join user_phone up on ub.user_id = up.user_id
        left join user_email ue on ub.user_id = ue.user_id
        left join (select *
        from (
        select user_id,
        row_number() over (partition by user_id order by login_time desc),
        ids,
        login_time
        from user_login_log
        ) as de_dump
        where row_number = 1) aa on ub.user_id = aa.user_id
        where 1 = 1
        <choose>
            <when test="userId!=null">
                and ub.user_id = #{userId}
            </when>
        </choose>
        <choose>
            <when test="loginName!=null">
                and login_name = #{loginName}
            </when>
        </choose>
        <choose>
            <when test="phone!=null">
                and phone = #{phone}
            </when>
        </choose>
        <choose>
            <when test="email!=null">
                and email = #{email}
            </when>
        </choose>
    </select>

    <update id="updateUserBase" parameterType="map">
        update user_base
        <set>
            <if test="language!=null">
                language=#{language},
            </if>
            <if test="userCode!=null">
                user_code=#{userCode},
            </if>
            <if test="nickname!=null">
                nickname = #{nickname}
            </if>
        </set>
        where user_id = #{userId}
    </update>
</mapper>